#include <unistd.h>

void ft_putchar(char c);

void ft_putchar(char c)
{
    write(1, &c, 1);
}
//
int main(void)
{
    ft_putchar('a');
    return (0);
}
// ou
int main(void)
{
    char c = 'x';

    ft_putchar(c); //ft_putchar('x');
    ft_putchar('\n');
    return (0);

}
// ou
int main(void)
{
    ft_putchar('H');
    ft_putchar('e');
    ft_putchar('l');
    ft_putchar('l');
    ft_putchar('o');
    ft_putchar(' ');
    ft_putchar('W');
    ft_putchar('o');
    ft_putchar('r');
    ft_putchar('l');
    ft_putchar('d');
    ft_putchar('!');

    return (0);
}
//

/*
EXPLICAÇÃO

O objetivo da função ft_putchar() é imprimir um caractere na tela. Ela recebe um caractere c como argumento e imprime esse caractere na saída padrão (stdout) usando a função write().

1 - #include<unistd.h> : esta linha inclui a biblioteca unistd.h, que fornece funções para operações de entrada e saída de dados em Unix. 
Inclui o cabeçalho 'unistd.h', que é necessário para utilizar a função 'write'.

Normalmente, inserimos o protótipo da função antes da sua definição ou no ínicio de um arquivo de cabeçalho (.h) - implementação da(s) biblioteca(s).
O protótipo de uma função em C é uma declaração da função que especifica o seu nome, os tipos de argumentos que ela aceita e o tipo de valor que ela devolve.
O protótipo é importante porque informa o compilador como a função deve ser chamada, garantido que os tipos de dados corretos sejam usados e que a função esteja disponível para uso antes da sua definição completa.


void ft_putchar(char c); : A função ft_putchar não devolve nenhum valor.
                           O nome da função é ft_putchar (este é o identificador pelo o qual a função será chamada no código).
                           A função ft_putchar aceita um único argumento do tipo char cujo parâmetro é c.
                                            
2 - void ft_putchar(char c) : esta linha declara e define uma função de nome ft_putchar que recebe um argumento do tipo char cujo parâmetro é c .
    O parâmetro c da função ft_putchar é um caractere. 
    A função ft_putchar recebe um caractere como parâmetro e imprime esse caractere na tela.
    Dentro da função ft_putchar(), o caractere c é passado para a função write() usando o operador &, que vai devolver o endereço de memória do caractere.
    Esse endereço é passado como segundo parâmetro da função write().
    A função não devolve nenhum valor (void).

3 - write (1, &c, 1) : a função write() é utilizada para escrever o caractere c no descritor de arquivo.
    A função write é usada para escrever dados num arquivo ou dispositivo. Neste caso, a função write é usada para escrever o caractere c no arquivo padrão de saída.
    Ela envia o byte contido no endereço &c para o descritor de arquivo (neste caso 1 (stdout)).
    Se for bem-sucedida, a função escreve o caractere 'a' na saída padrão e devolve o valor 1 (indicando que 1 byte foi escrito).

A função write() é chamada e recebe três argumentos :
   
    - '1' - O primeiro argumento é o descritor de arquivo que identifica onde os dados devem ser escritos. 
       Neste caso é 1, indicando que queremos escrever na saída padrão (stdout). 
       O descritor de arquivo é um número que identifica o arquivo ou dispositivo para o qual os dados serão escritos. 
       No caso da saída padrão, o descritor de arquivo é 1;
       
       Há três tipos de descritor de arquivo :

           - 0 : corresponde ao descritor de arquivo de entrada padrão (stdin);
           - 1 : corresponde ao descritor de arquivo de saída padrão (stdout);
           - 2 : corresponde ao descritor de arquivo de erro padrão (stderr);

    - '&c' - O segundo argumento corresponde ao endereço do caractere 'c' a ser escrito (isso signifca que queremos escrever o valor da variável 'c').

            Em C, um ponteiro é uma variável que armazena o endereço de outra variável. 

            char c = 'a';  c é uma variável do tipo char que armazena o caractere 'a'.
            char *p = &c;  p é um ponteiro para o tipo char, que armazena o endereço de c. O endereço da variável c é armazenado na variável *p (ponteiro p).

            O operador & é usado para obter o endereço de uma variável ( &c é o endereço da variável c).
            O operador * é usado para acessar o valor armazenado no endereço ao qual o ponteiro aponta. No exemplo acima, *p seria 'a', pois p aponta para c.

            Os ponteiros são muito úteis pois permitem que trabalhemos diretamente com a memória e que manipulemos os dados em diferentes locais da memória.

            Dentro da função ft_putchar() usamos &c para obter o endereço de c. Isso transforma c num ponteiro para o tipo char que aponta para a posição da memória onde c está armazenado.
            A função write() requer um ponteiro para um buffer de dados como segundo argumento. Passamos &c, que é um ponteiro para o endereço de c.
            Suponhamos que, quando for feita a chamada da função ft_putchar(), na main, o caractere c seja 'a'. O endereço de c (&c) é passado para a função write();
            O segundo argumento da função write() é o endereço na memória que aponta para um caractere ou string (se escrevermos a string diretamente, o compilador vai encontrar uma lugar na memória para ela e vai colocar o endereço no segundo parâmetro da função write).

    - '1' - O terceiro argumento é o número de bytes a serem escritos. O argumento 1, especifica que queremos escrever 1 byte a partir do endereço fornecido (neste caso, o byte correspondente ao caractere 'a'). 
            Assim, como estamos a escrever um único caractere, passamos apenas 1;

4 - int main(void) : declara a função 'main', que é o ponto de entrada do programa. 
    Esta função não recebe argumentos (void) e devolve um valor inteiro (int).
    Dentro da função main, é feita a chamada da função ft_putchar (ft_putchar('a')), passando o caractere 'a' como argumento. Isso fará com que a função ft_putchar() escreva o caractere 'a' no stdout.
    
    Se a função ft_putchar for chamada com o caractere 'a' como parâmetro, o seguinte acontecerá :

         1 - O endereço de memória do caractere 'a' é obtido, sendo que este endereço é armazenado na variável c, em que este será passado como o parâmetro c;
         2 - Dentro da ft_putchar(), o parâmetro c é inicializado com o valor 'a'.
         3 - O operador & é usado para obter o endereço de c.
         4 - O endereço de c é passado para a função write().
         5 - Na função write() será escrito 1 byte a partir do endereço de c que contém o valor 'a'.
             Quando write() é chamado, ele acessa o endereço de c e escreve o valor 'a' na saída padrão.

Resumo: 

- A função main() chama a função ft_putchar() para imprimir o caractere, que neste caso é o 'a', mas poderia ser qualquer outro caractere;

*/